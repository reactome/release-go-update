// This Jenkinsfile is used by Jenkins to run the 'GO Update' step of Reactome's release.
// This step synchronizes Reactome's GO terms with the Gene Ontology. 

import org.reactome.release.jenkins.utilities.Utilities

// Shared library maintained at 'release-jenkins-utils' repository.
def utils = new Utilities()

pipeline {
	agent any

	environment {
		ECR_URL = 'public.ecr.aws/reactome/release-go-update'
		CONT_NAME = 'go_container'
		CONT_ROOT = '/opt/release-go-update'
	}

	stages {
		// This stage checks that an upstream step, UniProt Update, was run successfully.
		stage('Check UniProt Update build succeeded'){
			steps{
				script{
					utils.checkUpstreamBuildsSucceeded("ConfirmReleaseConfigs")
				}
			}
		}

		/*
		// This stage backs up the gk_central database before it is modified.
		stage('Setup: Back up gk_central before modifications'){
			steps{
				script{
					withCredentials([usernamePassword(credentialsId: 'mySQLCuratorUsernamePassword', passwordVariable: 'pass', usernameVariable: 'user')]){
						utils.takeDatabaseDumpAndGzip("${env.GK_CENTRAL_DB}", "go_update", "before", "${env.CURATOR_SERVER}")
					}
				}
			}
		*/
		// Download go.obo and ec2go files from GO.
		stage('Setup: Download go.obo and ec2go files'){
			steps{
				script{
					sh "mkdir -p go-files"
					sh "wget -q -P go-files http://current.geneontology.org/ontology/go.obo"
					sh "wget -q -P go-files http://current.geneontology.org/ontology/external2go/ec2go"
				}
			}
		}
		// This stage makes the config/credentials file
		stage('Setup: Get config/credentials'){
			steps{
				script{
					withCredentials([file(credentialsId: 'Config', variable: 'ConfigFile')]){
						sh "mkdir -p config"
						sh "sudo cp $ConfigFile config/auth.properties"
						sh "sudo chown jenkins:jenkins config/ -R"                    
					}
				}
			}
		}
		// This stage pulls the docker image and removes old containers
		stage('Setup: Pull and clean docker environment'){
			steps{
				sh "docker pull ${ECR_URL}:latest"
				sh """
					if docker ps -a --format '{{.Names}}' | grep -Eq '${CONT_NAME}'; then
						docker rm -f ${CONT_NAME}
					fi
				"""
			}
		}

		// This stage executes the GO Update jar file via docker. 
		stage('Main: GO Update'){
			steps{
				sh """\
					docker run -v \$(pwd)/config:${CONT_ROOT}/config -v \$(pwd)/go-files:${CONT_ROOT}/go-files --net=host --name ${CONT_NAME} \\
						${ECR_URL}:latest \\
						/bin/bash -c 'java -Xmx${env.JAVA_MEM_MAX}m -jar target/go-update-*-jar-with-dependencies.jar config/auth.properties'
				"""
			}
		}

		// This stage backs up the gk_central database after modification.
		stage('Post: Backup gk_central after modifications'){
			steps{
				script{
					withCredentials([usernamePassword(credentialsId: 'mySQLCuratorUsernamePassword', passwordVariable: 'pass', usernameVariable: 'user')]){
						utils.takeDatabaseDumpAndGzip("${env.GK_CENTRAL_DB}", "go_update", "after", "${env.CURATOR_SERVER}")
					}
				}
			}
		}
		// This stage archives the contents of the 'reports' folder generated by GO Update and sends them in an email to the default recipients list.
		stage('Post: Email GO Update Reports'){
			steps{
				script{
					def releaseVersion = utils.getReleaseVersion()
					def goUpdateReportsFile = "go-update-v${releaseVersion}-reports.tgz"

					sh "mkdir -p reports"
					sh "docker cp ${CONT_NAME}:${CONT_ROOT}/reports/. reports/"
					sh "tar -zcf ${goUpdateReportsFile} reports/"
					
					def emailSubject = "GO Update Reports for v${releaseVersion}"
					def emailBody = "Hello,\n\nThis is an automated message from Jenkins regarding an update for v${releaseVersion}. The GO Update step has completed. Please review the reports attached to this email. If they look correct, these reports need to be uploaded to the Reactome Drive at Reactome>Release>Release QA>V${releaseVersion}_QA>V${releaseVersion}_QA_GO_Update_Reports. The URL to the new V${releaseVersion}_QA_GO_Update_Reports folder also needs to be updated at https://devwiki.reactome.org/index.php/Reports_Archive under 'GO Update Reports'. Please add the current GO report wiki URL to the 'Archived reports' section of the page. If the reports don't look correct, please email the developer running Release. \n\nThanks!"
					utils.sendEmailWithAttachment("${emailSubject}", "${emailBody}", "${goUpdateReportsFile}")
				}
			}
		}
		// All databases, logs, and data files generated by this step are compressed before moving them to the Reactome S3 bucket. All files are then deleted.
		stage('Post: Archive Outputs'){
			steps{
				script{
					def releaseVersion = utils.getReleaseVersion()
					def dataFiles = ["go-files/go.obo", "go-files/ec2go", "go-update-v${releaseVersion}-reports.tgz"]
					// GO Update log files are already in a folder called 'logs'.
					def logFiles = []
					def foldersToDelete = []
					utils.cleanUpAndArchiveBuildFiles("go_update", dataFiles, logFiles, foldersToDelete)
				}
			}
		}
	}
}